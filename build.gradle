plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version "1.2.2"
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
    id 'org.ajoberstar.git-publish' version '4.2.2'
}

group = 'com.bmuschko'

gradlePlugin {
    website = "https://github.com/bmuschko/gradle-clover-plugin"
    vcsUrl = "https://github.com/bmuschko/gradle-clover-plugin"
    description = 'Gradle Clover Plugin'

    plugins {
        gradleCloverPlugin {
            id = 'com.bmuschko.clover'
            implementationClass = 'com.bmuschko.gradle.clover.CloverPlugin'
            displayName = 'Gradle Clover Plugin'
            description = 'Gradle Clover Plugin'
            tags.set(['gradle', 'clover', 'code_coverage'])
        }
    }
}


defaultTasks 'clean', 'build'

apply from: "gradle/release.gradle"
apply from: "gradle/integration-test.gradle"
apply from: "gradle/functional-test.gradle"
apply from: "gradle/additional-artifacts.gradle"
apply from: "gradle/publishing.gradle"
apply from: "gradle/documentation.gradle"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = 'UTF-8'
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    if (project.hasProperty('rerun')) {
        outputs.upToDateWhen { false }
    }
    testLogging {
        events 'started', 'passed', 'failed', 'skipped'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation localGroovy()
    implementation gradleApi()
    testImplementation gradleTestKit()

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'

    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'junit:junit:4.13.2'
    testImplementation 'commons-io:commons-io:2.5'
    testRuntimeOnly 'commons-io:commons-io:2.16.1'
    testImplementation('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    testRuntimeOnly('org.spockframework:spock-core:2.3-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
}

ext.compatibilityVersion = '1.8'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

// Only add changing data to the manifest when publishing
gradle.taskGraph.whenReady { graph ->
    if (graph.allTasks.any { task -> task instanceof PublishToMavenLocal || task instanceof PublishToMavenRepository }) {
        jar {
            manifest {
                attributes 'Implementation-Title': 'Gradle Clover plugin',
                    'Implementation-Version': version,
                    'Built-By': System.getProperty("user.name"),
                    'Built-Date': new Date(),
                    'Built-JDK': System.getProperty("java.version")
            }
        }
    }
}

idea.project {
    jdkName = '1.8'
    languageLevel = compatibilityVersion

    ipr.withXml { provider ->
        def node = provider.asNode()

        // Use GIT
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'

        // Set Gradle home
        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
    }
}

eclipse {

    classpath {
        // default settings for downloading sources and Javadoc:
        downloadSources = true
        downloadJavadoc = true

        // This makes the Gradle paths and Eclipse paths align so
        // that we have a working workspace from the start.
        file {
            whenMerged { classpath ->
                classpath.entries.findAll { entry -> entry.kind == 'src' }.each { entry ->
                    switch(entry.path) {
                        case ~'src/main/groovy':
                        entry.output = "build/classes/groovy/main"
                        break
                        case ~'src/test/groovy':
                        entry.output = "build/classes/groovy/test"
                        break
                    }
                }
                def src = new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/resources/main", null)
                src.getEntryAttributes().put("gradle_scope", "main")
                src.getEntryAttributes().put("gradle_used_by_scope", "main,test")
                classpath.entries << src
                classpath.entries.unique(true) {
                    (it instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency) ? it.path : it
                }
            }
        }
    }
}
