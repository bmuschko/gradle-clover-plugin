plugins {
    id 'com.gradle.build-scan' version '2.2.1'
    id 'java-gradle-plugin'
    id 'groovy'
    id 'maven-publish'
    id 'idea'
    id 'eclipse'
    id "com.jfrog.bintray" version "1.8.4"
    id 'org.ajoberstar.reckon' version '0.9.0'
    id 'org.ajoberstar.git-publish' version '2.1.1'
}

buildScan {
    termsOfServiceUrl   = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

gradlePlugin {
    plugins {
        gradleCloverPlugin {
            id = 'com.bmuschko.clover'
            implementationClass = 'com.bmuschko.gradle.clover.CloverPlugin'
        }
    }
}

group = 'com.bmuschko'

defaultTasks 'clean', 'build'

apply from: "gradle/release.gradle"
apply from: "gradle/integration-test.gradle"
apply from: "gradle/functional-test.gradle"
apply from: "gradle/additional-artifacts.gradle"
apply from: "gradle/publishing.gradle"
apply from: "gradle/documentation.gradle"

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(GroovyCompile) {
    groovyOptions.encoding = 'UTF-8'
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    if (project.hasProperty('rerun')) {
        outputs.upToDateWhen { false }
    }
    testLogging {
        showStandardStreams = true
        events 'started', 'passed', 'failed', 'skipped'
    }
}

repositories {
    jcenter()
    mavenLocal()
}

dependencies {
    compile localGroovy()
    compile gradleApi()
    testCompile gradleTestKit()

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.0'
    
    testCompile 'junit:junit:4.12'
    testCompile 'commons-io:commons-io:2.5'
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
}

ext.compatibilityVersion = '1.8'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Clover plugin',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty("user.name"),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty("java.version")
    }
}

idea.project {
    jdkName = '1.8'
    languageLevel = compatibilityVersion

    ipr.withXml { provider ->
        def node = provider.asNode()

        // Use GIT
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'

        // Set Gradle home
        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
    }
}

eclipse {
    
    classpath {
        // default settings for downloading sources and Javadoc:
        downloadSources = true
        downloadJavadoc = true

        // This makes the Gradle paths and Eclipse paths align so
        // that we have a working workspace from the start.
        file {
            whenMerged { classpath ->
                classpath.entries.findAll { entry -> entry.kind == 'src' }.each { entry ->
                    switch(entry.path) {
                        case ~'src/main/groovy':
                        entry.output = "build/classes/groovy/main"
                        break
                        case ~'src/test/groovy':
                        entry.output = "build/classes/groovy/test"
                        break
                    }
                }
                def src = new org.gradle.plugins.ide.eclipse.model.SourceFolder("build/resources/main", null)
                src.getEntryAttributes().put("gradle_scope", "main")
                src.getEntryAttributes().put("gradle_used_by_scope", "main,test")
                classpath.entries << src
                classpath.entries.unique(true) {
                    (it instanceof org.gradle.plugins.ide.eclipse.model.ProjectDependency) ? it.path : it
                }
            }
        }
    }
}
